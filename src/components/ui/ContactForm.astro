---
import { WEB3FORMS_TOKEN } from "../../data/contact";

interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<form
  id="contact-form"
  class:list={[`contact-form`, `${className}`]}
  action="https://api.web3forms.com/submit"
  method="POST"
  novalidate
>
  <input type="hidden" name="access_key" value={WEB3FORMS_TOKEN} />
  <input type="hidden" name="from_name" value="Neighbor Aid Contact Form" />
  <input
    type="checkbox"
    name="botcheck"
    class="hidden"
    style="display: none;"
  />

  <div class="form-header">
    <h2 class="form-title">Send Us a Message</h2>
    <p class="form-description">We'll get back to you as soon as possible.</p>
  </div>

  <div id="form-alert" class="form-alert" role="alert" style="display: none;">
  </div>

  <div class="form-group">
    <label for="name" class="form-label">Name</label>
    <input
      type="text"
      id="name"
      name="name"
      class="form-input"
      required
      aria-required="true"
      placeholder="Your name"
    />
  </div>

  <div class="form-group">
    <label for="email" class="form-label">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      class="form-input"
      required
      aria-required="true"
      placeholder="your.email@example.com"
    />
  </div>

  <div class="form-group">
    <label for="phone" class="form-label">Phone (optional)</label>
    <input
      type="tel"
      id="phone"
      name="phone"
      class="form-input"
      placeholder="(XXX) XXX-XXXX"
    />
  </div>

  <div class="form-group">
    <label for="subject" class="form-label">Subject</label>
    <select
      id="subject"
      name="subject"
      class="form-select"
      required
      aria-required="true"
    >
      <option value="">Select a subject</option>
      <option value="general">General Inquiry</option>
      <option value="volunteer">Volunteering</option>
      <option value="donate">Donations</option>
      <option value="programs">Programs</option>
    </select>
  </div>

  <div class="form-group">
    <label for="message" class="form-label">Message</label>
    <textarea
      id="message"
      name="message"
      class="form-textarea"
      required
      aria-required="true"
      rows="5"
      placeholder="Your message here..."></textarea>
  </div>

  <button type="submit" class="form-submit">Send Message</button>
</form>

<script>
  (() => {
    // Initialize form elements
    const form = document.getElementById("contact-form");
    const alert = document.getElementById("form-alert");
    const submitButton = form?.querySelector('button[type="submit"]');

    // Validate required elements exist
    if (
      !(form instanceof HTMLFormElement) ||
      !(alert instanceof HTMLDivElement) ||
      !(submitButton instanceof HTMLButtonElement)
    ) {
      console.error("Required form elements not found");
      return;
    }

    // Create references with proper type information
    const formElement = form;
    const alertElement = alert;

    /**
     * Handle subject parameter from URL hash and scroll to form
     */
    function handleSubjectParam() {
      const hash = window.location.hash;
      if (hash.startsWith("#contact-form")) {
        const params = new URLSearchParams(hash.split("?")[1]);
        const subject = params.get("subject");
        if (subject) {
          const selectElement = document.getElementById("subject");
          if (selectElement instanceof HTMLSelectElement) {
            selectElement.value = subject;
          }
        }
        formElement.scrollIntoView({ behavior: "smooth" });
      }
    }

    const validAlertTypes = ['success', 'error', 'info'];
    const showAlert = (message = '', type = 'info') => {
      // Validate parameters
      if (typeof message !== 'string') {
        console.error('Message must be a string');
        return;
      }
      if (!validAlertTypes.includes(type)) {
        console.error('Invalid alert type');
        return;
      }
      if (!alertElement) return;

      alertElement.textContent = message;
      alertElement.className = `form-alert ${type}`;
      alertElement.style.display = "block";
      alertElement.scrollIntoView({ behavior: "smooth", block: "center" });
    }

    /**
     * Validate all form fields
     * @returns {boolean} True if all fields are valid, false otherwise
     */
    function validateForm() {
      const requiredFields = formElement.querySelectorAll('[required]');
      let isValid = true;

      requiredFields.forEach((field) => {
        if (
          field instanceof HTMLFormElement ||
          field instanceof HTMLInputElement ||
          field instanceof HTMLTextAreaElement
        ) {
          if (!field.value.trim()) {
            isValid = false;
            field.classList.add("error");
          } else {
            field.classList.remove("error");
          }
        }
      });

      const emailField = formElement.querySelector("#email");
      if (emailField instanceof HTMLInputElement) {
        if (
          emailField.value &&
          !emailField.value.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)
        ) {
          isValid = false;
          emailField.classList.add("error");
        }
      }

      const phoneField = formElement.querySelector("#phone");
      if (phoneField instanceof HTMLInputElement) {
        if (
          phoneField.value &&
          !phoneField.value.match(
            /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,
          )
        ) {
          isValid = false;
          phoneField.classList.add("error");
        }
      }

      return isValid;
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!validateForm()) {
        showAlert("Please fill in all required fields correctly.", "error");
        return;
      }

      const submitButton = formElement.querySelector('button[type="submit"]');
      if (!(submitButton instanceof HTMLButtonElement)) return;

      const originalButtonText = submitButton.textContent || "";
      submitButton.disabled = true;
      submitButton.textContent = "Sending...";

      try {
        const formData = new FormData(formElement);
        const subject = formData.get("subject");
        formData.set("subject", `Contact Form - ${subject} - Neighbor Aid`);

        const response = await fetch(formElement.action, {
          method: "POST",
          body: formData,
        });

        const data = await response.json();

        if (data.success) {
          showAlert(
            "Thank you for your message! We will get back to you soon.",
            "success",
          );
          formElement.reset();
          if (submitButton instanceof HTMLButtonElement) {
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
          }
        } else {
          throw new Error(data.message || "Something went wrong!");
        }
      } catch (error) {
        showAlert(
          "Sorry, there was an error sending your message. Please try again later.",
          "error",
        );
      } finally {
        if (submitButton instanceof HTMLButtonElement) {
          submitButton.disabled = false;
        }
        submitButton.textContent = originalButtonText;
      }
    });

    // Handle field validation on input
    const fields = form.querySelectorAll("input, textarea, select");
    fields.forEach((field) => {
      field.addEventListener("input", () => {
        field.classList.remove("error");
        if (alert.classList.contains("error")) {
          alert.style.display = "none";
        }
      });
    });

    // Run on page load and when hash changes
    handleSubjectParam();
    window.addEventListener("hashchange", handleSubjectParam);
  })();
</script>

<style>
  .contact-form {
    background-color: var(--color-surface);
    padding: var(--space-8);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
    box-shadow: var(--shadow-md);
    max-width: 700px;
    width: 100%;
    transition: box-shadow var(--transition-normal);
  }

  .contact-form:hover {
    box-shadow: var(--shadow-lg);
  }

  .form-header {
    text-align: center;
    margin-bottom: var(--space-6);
  }

  .form-title {
    font-size: var(--text-2xl);
    color: var(--color-text);
    margin-bottom: var(--space-2);
  }

  .form-description {
    color: var(--color-text-light);
  }

  .form-group {
    margin-bottom: var(--space-4);
  }

  .form-label {
    display: block;
    margin-bottom: var(--space-2);
    color: var(--color-text);
    font-weight: 500;
  }

  .form-input,
  .form-select,
  .form-textarea {
    width: 100%;
    padding: var(--space-3);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-md);
    background-color: var(--color-background);
    color: var(--color-text);
    transition: border-color var(--transition-normal);
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 1px var(--color-primary);
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: var(--color-text-light);
    opacity: 0.7;
  }

  .form-select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 1em;
    padding-right: 2.5rem;
  }

  .form-select:invalid {
    color: var(--color-text-light);
    opacity: 0.7;
  }

  .form-select option {
    color: var(--color-text);
    background-color: var(--color-background);
  }

  .form-select option:first-child {
    color: var(--color-text-light);
    opacity: 0.7;
  }

  .form-submit {
    width: 100%;
    padding: var(--space-3) var(--space-6);
    background-color: var(--color-primary);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: background-color var(--transition-normal);
  }

  .form-submit:hover {
    background-color: var(--color-primary-dark);
  }

  .form-submit:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .form-alert {
    margin-bottom: var(--space-4);
    padding: var(--space-3);
    border-radius: var(--radius-md);
    font-weight: 500;
  }

  .form-alert.success {
    background-color: var(--color-success-light);
    color: var(--color-success);
    border: 1px solid var(--color-success);
  }

  .form-alert.error {
    background-color: var(--color-error-light);
    color: var(--color-error);
    border: 1px solid var(--color-error);
  }

  .form-input.error,
  .form-select.error,
  .form-textarea.error {
    border-color: var(--color-error);
  }

  .hidden {
    display: none;
  }

  .form-submit:focus {
    outline: none;
    box-shadow:
      0 0 0 2px var(--color-background),
      0 0 0 4px var(--color-primary);
  }

  @media (max-width: 800px) {
    .contact-form {
      max-width: 800px;
    }

    .form-title {
      font-size: var(--text-xl);
    }
  }
</style>
