---
interface Props {
  label: string;
  items: {
    text: string;
    href: string;
  }[];
}

const { label, items } = Astro.props;
---

<div class="nav-dropdown">
  <button
    class="dropdown-trigger"
    aria-expanded="false"
    aria-haspopup="true"
  >
    {label}
    <svg 
      class="dropdown-arrow" 
      width="12" 
      height="12" 
      viewBox="0 0 12 12" 
      fill="none" 
      aria-hidden="true"
    >
      <path 
        d="M2 4L6 8L10 4" 
        stroke="currentColor" 
        stroke-width="2" 
        stroke-linecap="round" 
        stroke-linejoin="round"
      />
    </svg>
  </button>

  <div class="dropdown-menu" role="menu" hidden>
    <a 
      href="/programs"
      class="dropdown-item"
      role="menuitem"
    >
      <span class="overview-text">All Programs</span>
    </a>
    {items.map((item) => (
      <a 
        href={item.href}
        class="dropdown-item"
        role="menuitem"
      >
        {item.text}
      </a>
    ))}
  </div>
</div>

<style>
  .nav-dropdown {
    position: relative;
    display: block;
  }

  .dropdown-trigger {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-4);
    color: inherit;
    background: none;
    border: none;
    font: inherit;
    cursor: pointer;
    width: 100%;
  }

  .dropdown-trigger:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .dropdown-arrow {
    transition: transform var(--transition-normal);
    margin-left: var(--space-2);
  }

  .dropdown-trigger[aria-expanded="true"] .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dropdown-menu {
    position: absolute;
    top: calc(100% + var(--space-2));
    right: 0;
    transform: translateY(-10px);
    min-width: max-content;
    max-width: calc(100vw - var(--space-8));
    padding: var(--space-2);
    background: var(--color-surface);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-lg);
    z-index: 50;
    opacity: 0;
    transition: opacity var(--transition-normal), transform var(--transition-normal);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    border: 1px solid var(--color-border);
  }

  .dropdown-menu[hidden] {
    display: none;
  }

  .dropdown-menu:not([hidden]) {
    opacity: 1;
    transform: translateY(0);
  }

  .dropdown-item {
    display: block;
    padding: var(--space-3) var(--space-6);
    color: var(--color-text);
    text-decoration: none;
    background-color: var(--color-surface);
    transition: background-color var(--transition-normal);
    border-bottom: 1px solid var(--color-border);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .dropdown-item:last-child {
    border-bottom: none;
  }

  .dropdown-item:hover {
    background-color: var(--color-surface-hover);
  }

  .dropdown-item:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: -2px;
  }

  .overview-text {
    font-weight: 600;
    color: var(--color-primary);
  }

  @media (max-width: 768px) {
    .nav-dropdown {
      width: 100%;
    }

    .dropdown-menu {
      position: static;
      box-shadow: none;
      margin: var(--space-2) 0;
      opacity: 1;
      transform: none;
      border-radius: var(--radius-md);
      width: 100%;
      max-width: none;
      padding: 0;
    }

    .dropdown-item {
      padding: var(--space-3) var(--space-4);
      -webkit-tap-highlight-color: transparent;
      white-space: normal;
    }

    /* Enable hover effects only on devices that support hover */
    @media (hover: hover) {
      .dropdown-item:hover {
        background-color: var(--color-surface-hover);
      }
    }
  }
</style>

<script>
  class NavDropdownElement extends HTMLElement {
    private trigger: HTMLButtonElement | null;
    private menu: HTMLElement | null;

    constructor() {
      super();
      this.trigger = this.querySelector('.dropdown-trigger');
      this.menu = this.querySelector('.dropdown-menu');
      this.setupEventListeners();
    }

    private setupEventListeners(): void {
      this.trigger?.addEventListener('click', () => this.toggleMenu());

      document.addEventListener('click', (e: Event) => {
        if (!this.contains(e.target as Node)) {
          this.closeMenu();
        }
      });

      this.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Escape') {
          this.closeMenu();
          this.trigger?.focus();
        }
      });
    }

    private toggleMenu(): void {
      const isExpanded = this.trigger?.getAttribute('aria-expanded') === 'true';
      if (isExpanded) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }

    private openMenu(): void {
      this.trigger?.setAttribute('aria-expanded', 'true');
      if (this.menu) {
        this.menu.removeAttribute('hidden');
      }
    }

    private closeMenu(): void {
      this.trigger?.setAttribute('aria-expanded', 'false');
      if (this.menu) {
        this.menu.setAttribute('hidden', '');
      }
    }
  }

  customElements.define('nav-dropdown', NavDropdownElement);
</script>
