---
import BaseLayout from "../../components/layout/BaseLayout.astro";
import Header from "../../components/layout/Header.astro";
import Footer from "../../components/layout/Footer.astro";
import Hero from "../../components/ui/Hero.astro";
import CallToAction from "../../components/ui/CallToAction.astro";
import { programs } from "../../data/programs";
import { parseMarkdown } from "../../utils/markdown";

export function getStaticPaths() {
  return programs.map((program) => ({
    params: { slug: program.slug },
    props: { program },
  }));
}

const { program } = Astro.props;

// Process markdown content
const processedContent = await parseMarkdown(program.detailedDescription);
---

<BaseLayout title={`${program.title} | Camrose Neighbor Aid Center`}>
  <Header />

  <main class="program-page">
    <Hero 
      title={program.title} 
      backgroundImage={program.image}
      imageAlt={program.imageAlt}
    />

    <div class="content-wrapper">
      <article 
        class="program-content" 
        aria-labelledby="program-title"
        itemscope 
        itemtype="https://schema.org/Service"
      >
        <header class="program-header">
          <h1 id="program-title" class="program-title" itemprop="name">
            About {program.title}
          </h1>
          <p class="program-description" itemprop="description">
            {program.description}
          </p>
        </header>
        
        <div 
          class="program-details" 
          set:html={processedContent}
          itemprop="serviceType"
        />
      </article>

      <aside class="program-cta" aria-label="Contact information">
        <CallToAction
          title="Interested in this program?"
          description="Contact us to learn more about how you can participate or support this initiative."
          primaryCta={{
            text: "Contact Us",
            href: `/contact#contact-form?subject=${encodeURIComponent(program.title)}`,
            ariaLabel: `Contact us about ${program.title}`,
          }}
        />
      </aside>
    </div>
  </main>

  <Footer />
</BaseLayout>

<style>
  /* Layout */
  .program-page {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    width: 100%;
  }

  .content-wrapper {
    flex: 1;
    width: 100%;
    max-width: var(--max-width);
    margin: 0 auto;
    padding: var(--space-2xl) var(--space-m);
    display: grid;
    gap: var(--space-3xl);
  }

  /* Article content */
  .program-content {
    margin: 0 auto;
    width: 100%;
    max-width: 800px;
    display: flex;
    flex-direction: column;
    gap: var(--space-2xl);
  }

  .program-header {
    text-align: center;
    margin-bottom: var(--space-xl);
  }

  .program-title {
    color: var(--color-primary);
    font-size: var(--text-4xl);
    font-weight: 600;
    margin-bottom: var(--space-m);
    line-height: 1.2;
  }

  .program-description {
    font-size: var(--text-xl);
    color: var(--color-text-muted);
    text-align: justify;
    max-width: 65ch;
    margin: 0 auto;
    line-height: 1.6;
  }

  .program-details {
    width: 100%;
  }

  /* Call to action */
  .program-cta {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Markdown content styles */
  .program-details :global(.overview) {
    background-color: var(--color-bg-offset);
    border-radius: var(--radius-lg);
    padding: var(--space-xl);
    margin-bottom: var(--space-2xl);
    box-shadow: var(--shadow-sm);
  }

  .program-details :global(.services),
  .program-details :global(.schedule),
  .program-details :global(.requirements) {
    margin-bottom: var(--space-2xl);
  }

  .program-details :global(h2) {
    color: var(--color-primary);
    font-size: var(--text-2xl);
    font-weight: 600;
    margin-bottom: var(--space-l);
    line-height: 1.3;
  }

  .program-details :global(h3) {
    color: var(--color-text);
    font-size: var(--text-xl);
    font-weight: 500;
    margin-bottom: var(--space-m);
    line-height: 1.4;
  }

  .program-details :global(p) {
    margin-bottom: var(--space-m);
    line-height: 1.6;
  }

  .program-details :global(ul),
  .program-details :global(ol) {
    margin-bottom: var(--space-l);
    padding-left: var(--space-l);
    list-style-position: outside;
  }

  .program-details :global(li) {
    margin-bottom: var(--space-s);
    line-height: 1.5;
    padding-left: var(--space-xs);
  }

  .program-details :global(.highlight) {
    color: var(--color-primary);
    font-weight: 500;
  }

  .program-details :global(.note) {
    background-color: var(--color-bg-muted);
    border-left: 4px solid var(--color-primary);
    padding: var(--space-m);
    margin: var(--space-l) 0;
    font-size: var(--text-sm);
    border-radius: 0 var(--radius-sm) var(--radius-sm) 0;
  }

  /* Focus styles */
  .program-details :global(a:focus),
  .program-details :global(button:focus) {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
    border-radius: var(--radius-sm);
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .content-wrapper {
      padding: var(--space-xl) var(--space-m);
      gap: var(--space-2xl);
    }

    .program-title {
      font-size: var(--text-3xl);
    }

    .program-description {
      font-size: var(--text-lg);
    }

    .program-details :global(h2) {
      font-size: var(--text-xl);
    }

    .program-details :global(h3) {
      font-size: var(--text-lg);
    }

    .program-details :global(.overview) {
      padding: var(--space-l);
    }

    .program-details :global(ul),
    .program-details :global(ol) {
      padding-left: var(--space-m);
    }
  }

  /* Print styles */
  @media print {
    .program-page {
      min-height: auto;
    }

    .program-details :global(.overview) {
      box-shadow: none;
      border: 1px solid var(--color-border);
    }

    .program-cta {
      display: none;
    }
  }
  }
</style>
